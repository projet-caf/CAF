<?php

namespace CAF\ContentBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;


/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryTranslationRepository extends EntityRepository
{

	public function getCategoryLang($lang) {
		return $this->getEntityManager()
					->createQueryBuilder('ct')
                    ->Select('ct')
                    ->from('CAFContentBundle:CategoryTranslation','ct')
                    ->where('ct.lang=:lang')
                    ->setParameter('lang', $lang)
                    ->andwhere('ct.published=:published')
                    ->setParameter('published',1)
        ;            
	}

    public function findByUrl($url)
    {
        return $this->getEntityManager()
                        ->createQueryBuilder('ct')
                        ->Select('ct')
                        ->from('CAFContentBundle:CategoryTranslation', 'ct')
                        ->where('ct.url=:url')
                        ->setParameter('url', $url)
                        ->getQuery()
                        ->getResult();
    }

    public function getCanonical($id) {
        return $this->getEntityManager()
                    ->createQueryBuilder('mv')
                    ->Select('mv.value')
                    ->from('CAFContentBundle:MetasValueCategory','mv')
                    ->leftjoin('mv.category_translation','c')
                    ->leftjoin('mv.meta','m')
                    ->where('c.id=:id')
                    ->setParameter('id',$id)
                    ->andWhere('m.name=:canonical')
                    ->setParameter('canonical','Canonical')
                    ->getQuery()
                    ->getResult();
    }

    public function getAbsoluteUrl($id) {
        return $this->getEntityManager()
                    ->createQueryBuilder('mv')
                    ->Select('mv.value')
                    ->from('CAFContentBundle:MetasValueCategory','mv')
                    ->leftjoin('mv.category_translation','c')
                    ->leftjoin('mv.meta','m')
                    ->where('c.id=:id')
                    ->setParameter('id',$id)
                    ->andWhere('m.name=:url')
                    ->setParameter('url','Url')
                    ->getQuery()
                    ->getResult();
    }


}